class Solution {
    // Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> articulationPoints(int V,
                                                 ArrayList<ArrayList<Integer>> adj) {
        // Code here
        int[] low = new int[V];
        int[] tin = new int[V];
        int[] vis = new int[V];
        int[] mark = new int[V];
        for(int i = 0; i<V; i++){
            if(vis[i] == 0){
                dfs(i,-1,low,tin,vis,mark,adj);
            }
        }
        ArrayList<Integer> ans = new ArrayList<>();
        for(int i = 0; i<V; i++){
            if(mark[i] == 1){
                ans.add(i);
            }
        }
       if(ans.size() == 0){
           ans.add(-1);
       }
        return ans;
    }
    int timer = 0;
    public void dfs(int node, int parent, int[] low, int[] tin, int[] vis, int[] mark, ArrayList<ArrayList<Integer>> ans){
        vis[node] = 1;
        low[node] = tin[node] = timer;
        timer++;
         int childCount = 0;
        for(int nbrs : ans.get(node)){
            if(nbrs == parent){
                continue;
            }
            if(vis[nbrs] == 0){
                dfs(nbrs,node,low,tin,vis,mark,ans);
                low[node] = Math.min(low[node],low[nbrs]);
                if(low[nbrs] >= tin[node] && parent != -1){
                    mark[node] = 1;
                }
                childCount++;
            }
            else{
                low[node] = Math.min(low[node],tin[nbrs]);
            }
        }
        // condition for root
        if(parent == -1 && childCount > 1){
            mark[node] = 1;
        }
    }
}
