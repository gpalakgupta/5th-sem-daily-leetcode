class Solution {
    static int matrixMultiplication(int arr[]) {


        // code here
        // int n = arr.length;
        // int[][] dp = new int[n+1][n+1];
        // for(int[] a : dp){
        //     Arrays.fill(a,-1);
        // }
        // return helper(1,n-1,arr,dp);


        int n = arr.length;
        int[][] dp = new int[n][n];
        for(int i = n-1; i>0; i--){
            for(int j = i+1; j<n; j++){
                int mini = Integer.MAX_VALUE;
                for(int k = i; k<j; k++){
                    int steps = arr[i-1]*arr[k]*arr[j]+dp[i][k]+dp[k+1][j];
                    mini = Math.min(mini,steps);
                }
                dp[i][j] = mini;
            }
        }
        return dp[1][n-1];
    }
    public static int helper(int i, int j , int[] arr, int[][] dp){
        if(i == j){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int mini = Integer.MAX_VALUE;
        for(int k = i; k<j; k++){
            int steps = arr[i-1]*arr[k]*arr[j]+helper(i,k,arr,dp)+helper(k+1,j,arr,dp);
            if(steps < mini){
                mini = steps;
            }
        }
        return dp[i][j] = mini;
    }
}
