class Solution {
    public void solveSudoku(char[][] board) {
        print(board,0,0);
    }
    public boolean print(char[][] board, int row, int col){
        if(col >= 9){
            col = 0;
            row++;
        }
        if(row >= 9){
            return true;
        }
        if(board[row][col] != '.'){
            return print(board,row,col+1);
        }

        for(int i = 1; i<=9; i++){
            if(isvalid(board,row,col,i)){
                board[row][col] = (char)(i+'0');
                boolean ans = print(board,row,col+1);
                if(ans){
                    return ans;
                }
                board[row][col] = '.';
            }
        }
        return false;
    }
    public boolean isvalid(char[][] board, int row, int col, int val){
        for(int i = 0; i<9; i++){
            if(board[i][col] == (char)(val+'0')){
                return false;
            }
        }
        for(int i = 0; i<9; i++){
            if(board[row][i] == (char)(val+'0')){
                return false;
            }
        }

        int r = row/3*3;
        int c = col/3*3;

        for(int i = r; i<r+3; i++){
            for(int j = c; j<c+3; j++){
                if(board[i][j] == (char)(val+'0')){
                    return false;
                }
            }
        }
        return true;

    }
}
