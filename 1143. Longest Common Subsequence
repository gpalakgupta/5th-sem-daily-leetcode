class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        // int n1 = text1.length();
        // int n2 = text2.length();
        // int[][] dp = new int[n1+1][n2+1];
        // for(int[] a : dp){
        //     Arrays.fill(a,-1);
        // }
        // return helper(text1,text2,0,0,n1,n2,dp);
        return helper(text1,text2);
    }

    // top down


    // public int helper(String text1, String text2, int i, int j, int n1, int n2, int[][] dp){
    //     if(i == n1 || j == n2){
    //         return 0;
    //     }
    //     if(dp[i][j] != -1){
    //         return dp[i][j];
    //     }
    //     int ans = 0;
    //     if(text1.charAt(i) == text2.charAt(j)){
    //         ans = 1+helper(text1,text2,i+1,j+1,n1,n2,dp);
    //     }
    //     else{
    //         int a = helper(text1,text2,i+1,j,n1,n2,dp);
    //         int b = helper(text1,text2,i,j+1,n1,n2,dp);
    //         ans = Math.max(a,b);
    //     }
    //     return dp[i][j] = ans;
    // }


    // bottom up

    public int helper(String s1, String s2){
        int n1 = s1.length();
        int n2 = s2.length();
        int[][] dp = new int[n1+1][n2+1];
        for(int i = 0; i<n1; i++){
            dp[i][0] = 0;
        }
        for(int i = 0; i<n2; i++){
            dp[0][i] = 0;
        }
        for(int i = 1; i<=n1; i++){
            for(int j = 1; j<=n2; j++){
                int ans = 0;
                if(s1.charAt(i-1) == s2.charAt(j-1)){
                    ans = 1+dp[i-1][j-1];
                }
                else{
                    int a = dp[i-1][j];
                    int b = dp[i][j-1];
                    ans = Math.max(a,b);
                }
                dp[i][j] = ans;
            }
        }
        return dp[n1][n2];
    }
}

