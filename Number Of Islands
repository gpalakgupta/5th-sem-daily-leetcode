// User function Template for Java

class Solution {
    public class Node {
        int val;
        int rank;
        Node parent;
    }

    HashMap<Integer, Node> map = new HashMap<>();

    public void createSet(int v) {
        Node nn = new Node();
        nn.val = v;
        nn.rank = 0;
        nn.parent = nn;
        map.put(v, nn);
    }

    public int find(int v) {
        Node nn = map.get(v);
        return find(nn).val;
    }

    public Node find(Node nn) {
        if (nn.parent == nn) {
            return nn;
        }
        Node rn = find(nn.parent);
        nn.parent = rn;
        return rn;
    }
     public void union(int v, int u){
        Node n1 = map.get(v);
        Node n2 = map.get(u);
        Node re1 = find(n1);
        Node re2 = find(n2);
        if(re1 == re2){
            return;
        }
        if(re1.rank == re2.rank){
            re2.parent = re1;
            re1.rank++;
        }
        else if(re1.rank > re2.rank){
            re2.parent = re1;
        }
        else{
            re1.parent = re2;
        }
    }
    public boolean isvalid(int cr, int cc, int n, int m){
        return cr >= 0 && cr < n && cc >= 0 && cc<m;
    }
    public List<Integer> numOfIslands(int rows, int cols, int[][] operators) {
        // Your code here
        List<Integer> ans = new ArrayList<>();
        int n = operators.length;
        for(int i = 0; i<rows*cols; i++){
            createSet(i);
        }
        int cnt = 0;
        int[][] vis = new int[rows][cols];
        for(int i = 0; i<n; i++){
            int r = operators[i][0];
            int c = operators[i][1];
            if(vis[r][c] == 1){
                ans.add(cnt);
                continue;
            }
            cnt++;
            vis[r][c] = 1;
            int[] R = {0,-1,0,1};
            int[] C = {-1,0,1,0};
            for(int i1 = 0; i1<4; i1++){
                int cr = r+R[i1];
                int cc = c+C[i1];
                if(isvalid(cr,cc,rows,cols) && vis[cr][cc] == 1){
                    int nodeNo = r*cols+c;
                    int cNodeNo = cr*cols+cc;
                    if(find(nodeNo) != find(cNodeNo)){
                        cnt--;
                        union(nodeNo,cNodeNo);
                    }
                }
            } 
            ans.add(cnt);
        }
        return ans;
        
    }
}
