class Solution {
     public class Node {
        int val;
        int rank;
        Node parent;
    }

    HashMap<Integer, Node> map = new HashMap<>();

    public void createSet(int v) {
        Node nn = new Node();
        nn.val = v;
        nn.rank = 0;
        nn.parent = nn;
        map.put(v, nn);
    }

    public int find(int v) {
        Node nn = map.get(v);
        return find(nn).val;
    }

    public Node find(Node nn) {
        if (nn.parent == nn) {
            return nn;
        }
        Node rn = find(nn.parent);
        nn.parent = rn;
        return rn;
    }
     public void union(int v, int u){
        Node n1 = map.get(v);
        Node n2 = map.get(u);
        Node re1 = find(n1);
        Node re2 = find(n2);
        if(re1 == re2){
            return;
        }
        if(re1.rank == re2.rank){
            re2.parent = re1;
            re1.rank++;
        }
        else if(re1.rank > re2.rank){
            re2.parent = re1;
        }
        else{
            re1.parent = re2;
        }
    }

    public List<List<String>> accountsMerge(List<List<String>> accounts) {
        List<List<String>> ans = new ArrayList<>();
        HashMap<String,Integer> mp = new HashMap<>();
        int n = accounts.size();
        for(int i = 0; i<n; i++){
            createSet(i);
        }
        for(int i = 0; i<n; i++){
            for(int j = 1; j<accounts.get(i).size(); j++){
                String str = accounts.get(i).get(j);
                if(!mp.containsKey(str)){
                    mp.put(str,i);
                }
                else{
                    union(i,mp.get(str));
                }
            }
        }

        List<String>[] ll = new ArrayList[n];
        for(int i = 0; i<n; i++){
            ll[i] = new ArrayList<>();
        }

        for(String el : mp.keySet()){
            int i = find(mp.get(el));
            ll[i].add(el);
        }

        for(int i = 0; i<n; i++){
            if(ll[i].size() == 0){
                continue;
            }
            Collections.sort(ll[i]);
            List<String> temp = new ArrayList<>();
            temp.add(accounts.get(i).get(0));
            for(String el : ll[i]){
                temp.add(el);
            }
            ans.add(temp);
        }
        return ans;
    }
}
