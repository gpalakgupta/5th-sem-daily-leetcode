class Solution {
    public int change(int amount, int[] coins) {
        // int n = coins.length;
        // int[][] dp = new int[n+1][amount+1];
        // for(int[] a : dp){
        //     Arrays.fill(a,-1);
        // }
        // return helper(amount, coins, 0,dp);

        return helper(amount,coins);
    }

    // top down

    // public int helper(int amt, int[] coins, int idx, int[][] dp){
    //     if(amt == 0){
    //         return 1;
    //     }
    //     if(idx == coins.length){
    //         return 0;
    //     }
    //     if(dp[idx][amt] != -1){
    //         return dp[idx][amt];
    //     }

    //     int inc = 0;
    //     int exc = 0;
    //     if(amt-coins[idx] >= 0){
    //         inc = helper(amt-coins[idx],coins,idx,dp);
    //     }
    //     exc = helper(amt,coins,idx+1,dp);
    //     return dp[idx][amt] = inc+exc;
    // }

    // bottom up

    public int helper(int amt, int[] coins){
        int n = coins.length;
        int[][] dp = new int[n+1][amt+1];
        for(int i = 0; i<=n; i++){
            dp[i][0] = 1;
        }
        for(int i = 1; i<=n; i++){
            for(int j = 1; j<=amt; j++){
                int inc = 0;
                int exc = 0;
                if(j>=coins[i-1]){
                    inc = dp[i][j-coins[i-1]];
                }
                exc = dp[i-1][j];
                dp[i][j] = inc+exc;
            }
        }
        return dp[n][amt];
    }
}
