// User function Template for Java

class Solution {
    public class edgePair{
        int e1;
        int e2;
        int cost;
        public edgePair(int e1, int e2, int cost){
            this.e1 = e1;
            this.e2 = e2;
            this.cost = cost;
        }
    }
    
    public List<edgePair> addEdge(HashMap<Integer,HashMap<Integer,Integer>> map){
        List<edgePair> ll = new ArrayList<>();
        for(int el1 : map.keySet()){
            for(int el2 : map.get(el1).keySet()){
                ll.add(new edgePair(el1,el2,map.get(el1).get(el2)));
            }
        }
        return ll;
    }
    public int[] bellmanFord(int V, int[][] edges, int src) {
        // code here
        HashMap<Integer,HashMap<Integer,Integer>> map = new HashMap<>();
        for(int i = 0; i<V; i++){
            map.put(i,new HashMap<>());
        }
        for(int i = 0; i<edges.length; i++){
            int a = edges[i][0];
            int b = edges[i][1];
            int cost = edges[i][2];
            map.get(a).put(b,cost);
        }
        
        return bellman(map,src,V);
    }
    public int[] bellman(HashMap<Integer,HashMap<Integer,Integer>> map, int src, int V){
        int[] dis = new int[V];
        List<edgePair> ll = addEdge(map);
        
        Arrays.fill(dis,Integer.MAX_VALUE);
        dis[src] = 0;
        
        for(int i = 0; i<=V; i++){
            for(edgePair e : ll){
                if(i == V && dis[e.e1] != Integer.MAX_VALUE && dis[e.e2] > dis[e.e1]+e.cost){
                    return new int[]{-1};
                }
                else if(dis[e.e1] != Integer.MAX_VALUE && dis[e.e2] > dis[e.e1]+e.cost){
                    dis[e.e2] = dis[e.e1]+e.cost;
                }
            }
        }
        
        for(int i = 0; i<V; i++){
            if(dis[i] == Integer.MAX_VALUE){
                dis[i] = 100000000;
            }
        }
        return dis;
        
    }
}
