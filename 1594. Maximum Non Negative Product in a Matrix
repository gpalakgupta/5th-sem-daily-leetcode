class Solution {
    Long[][][] dp;
    public int maxProductPath(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int mod = 1000000007;
        dp = new Long[n][m][2];
        long[] ans = solve(0,0,n,m,grid,dp);
        return ans[0] >= 0 ? (int)(ans[0]%mod) : -1;
    }

    public long[] solve(int i, int j, int n, int m, int[][] grid, Long[][][] dp){
        if(i == n-1 && j == m-1){
            return new long[]{grid[i][j],grid[i][j]};
        }

        if(dp[i][j][0] != null){
            return new long[]{dp[i][j][0],dp[i][j][1]};
        }

        long max_val = Long.MIN_VALUE;
        long min_val = Long.MAX_VALUE;
        if(i+1 < n){
            long[] down = solve(i+1,j,n,m,grid,dp);
            max_val = Math.max(max_val,Math.max(down[0]*grid[i][j],down[1]*grid[i][j]));
            min_val = Math.min(min_val,Math.min(down[0]*grid[i][j],down[1]*grid[i][j]));
        }
        if(j+1<m){
            long[] right = solve(i,j+1,n,m,grid,dp);
            max_val = Math.max(max_val,Math.max(right[0]*grid[i][j],right[1]*grid[i][j]));
            min_val = Math.min(min_val,Math.min(right[0]*grid[i][j],right[1]*grid[i][j]));
        }

        dp[i][j][0] = max_val;
        dp[i][j][1] = min_val;
        return new long[]{max_val,min_val};
    }
}
