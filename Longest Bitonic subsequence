
class Solution {
    public static int LongestBitonicSequence(int n, int[] nums) {
        // code here
        int[] dp1 = new int[n];
        Arrays.fill(dp1,1);
        int[] dp2 = new int[n];
        Arrays.fill(dp2,1);
        helper1(nums,dp1);
        helper2(nums,dp2);
        int ans = 0;
        for(int i = 0; i<n; i++){
            if(dp1[i] > 1 && dp2[i] > 1) { 
                ans = Math.max(ans, dp1[i] + dp2[i] - 1);
            }
        }
        return ans;
    }
    public static void helper1(int[] nums, int[] dp1){
        for(int i = 0; i<nums.length; i++){
            for(int j = 0; j<i; j++){
                if(nums[j] < nums[i] && dp1[i] < dp1[j]+1){
                    dp1[i] = dp1[j]+1;
                }
            }
        }
    }
    public static void helper2(int[] nums, int[] dp2){
        for(int i = nums.length-1; i>=0; i--){
            for(int j = nums.length-1; j>i; j--){
                if(nums[j] < nums[i] && dp2[i] < dp2[j]+1){
                    dp2[i] = dp2[j]+1;
                }
            }
        }
    }
}
