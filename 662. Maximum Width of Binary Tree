/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public class Pair{
        TreeNode node;
        int idx;
        public Pair(TreeNode node, int idx){
            this.node = node;
            this.idx = idx;
        }
    }
    public int widthOfBinaryTree(TreeNode root) {
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(root,0));
        int ans = 0;
        while(!q.isEmpty()){
            Pair rv = q.peek();
            int st = rv.idx;
            int n = q.size();
            for(int i = 0; i<n; i++){
                Pair r = q.poll();
                int end = r.idx;
                if(r.node.left != null){
                    q.add(new Pair(r.node.left,2*end+1));
                }
                if(r.node.right != null){
                    q.add(new Pair(r.node.right,2*end+2));
                }
                ans = Math.max(ans,end-st+1);
            }
        }
        return ans;
    }
}
