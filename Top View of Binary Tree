/*
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}
*/

class Solution {
    static class Pair{
        Node node;
        int ht;
        public Pair(Node node, int ht){
            this.node = node;
            this.ht = ht;
        }
    }
    // Function to return a list of nodes visible from the top view
    // from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root) {
        // code here
        ArrayList<Integer> ll = new ArrayList<>();
        if(root == null){
            return ll;
        }
        Queue<Pair> q = new LinkedList<>();
        TreeMap<Integer,Integer> map = new TreeMap<>();
        q.add(new Pair(root,0));
        while(!q.isEmpty()){
            Pair rv = q.poll();
            Node node = rv.node;
            int ht = rv.ht;
            if(!map.containsKey(ht)){
                map.put(ht,node.data);
            }
            if(node.left != null){
                q.add(new Pair(node.left,ht-1));
            }
            if(node.right != null){
                q.add(new Pair(node.right,ht+1));
            }
        }
        for(int key : map.keySet()){
            ll.add(map.get(key));
        }
        return ll;
    }
}
