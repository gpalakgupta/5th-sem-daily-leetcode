class Solution {
    public class Pair{
        int first;
        int second;
        public Pair(int first, int second){
            this.first = first;
            this.second = second;
        }
    }
    public int[][] merge(int[][] intervals) {
        int n = intervals.length;
        Pair[] arr = new Pair[n];
        for(int i = 0; i<n; i++){
            arr[i] = new Pair(intervals[i][0],intervals[i][1]);
        }
        Arrays.sort(arr,new Comparator<Pair>(){
            @Override
            public int compare(Pair o1, Pair o2){
                if(o1.first != o2.first){
                    return o1.first-o2.first;
                }
                else{
                    return o1.second-o2.second;
                }
            }
        });

        List<List<Integer>> ans = new ArrayList<>();
        ans.add(Arrays.asList(arr[0].first,arr[0].second));
        for(int i = 1; i<n; i++){
            if(arr[i].first <= ans.get(ans.size()-1).get(1)){
                int size = ans.size()-1;
                int value = Math.max(arr[i].second,ans.get(size).get(1));
                ans.get(size).set(1,value);
            }
            else{
                ans.add(Arrays.asList(arr[i].first,arr[i].second));
            }
        }
        int[][] res = new int[ans.size()][2];
        for(int i = 0; i<ans.size(); i++){
            res[i][0] = ans.get(i).get(0);
            res[i][1] = ans.get(i).get(1);
        }
        return res;
    }
}
