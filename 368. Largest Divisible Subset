class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        return helper(nums);
    }

    public List<Integer> helper(int[] nums) {
        int n = nums.length;
        int[] dp = new int[n];
        int[] hash = new int[n];
        Arrays.fill(dp, 1);
        int mx = 1;
        int lastIdx = -1;
        Arrays.sort(nums);
        for (int i = 0; i < n; i++) {
            hash[i] = i;
            for (int j = 0; j < i; j++) {
                if (nums[i] % nums[j] == 0 && dp[i] < dp[j] + 1) {
                    dp[i] = dp[j] + 1;
                    hash[i] = j;
                }
            }
            if (dp[i] > mx) {
                mx = dp[i];
                lastIdx = i;
            }
        }
        List<Integer> ans = new ArrayList<>();
        if(lastIdx == -1){
            ans.add(nums[0]);
            return ans;
        }
        ans.add(nums[lastIdx]);
        while (hash[lastIdx] != lastIdx) {
            lastIdx = hash[lastIdx];
            ans.add(nums[lastIdx]);
        }
        Collections.reverse(ans);  
        return ans;
    }
}
