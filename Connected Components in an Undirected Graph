
class Solution {
    public ArrayList<ArrayList<Integer>> getComponents(int V, int[][] edges) {
        // code here
        HashMap<Integer,List<Integer>> map = new HashMap<>();
        for(int i = 0; i<V; i++){
            map.put(i,new ArrayList<>());
        }
        
        for(int i = 0; i<edges.length; i++){
            int a = edges[i][0];
            int b = edges[i][1];
            map.get(a).add(b);
            map.get(b).add(a);
        }
        
        return helper(map);
    }
    public ArrayList<ArrayList<Integer>> helper(HashMap<Integer,List<Integer>> map){
        HashSet<Integer> visited = new HashSet<>();
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        Queue<Integer> q = new LinkedList<>();
        for(int src : map.keySet()){
            if(visited.contains(src)){
                continue;
            }
            q.add(src);
            ArrayList<Integer> lt = new ArrayList<>();
            while(!q.isEmpty()){
                int rv = q.poll();
                if(visited.contains(rv)){
                    continue;
                }
                visited.add(rv);
                lt.add(rv);
                for(int nbrs : map.get(rv)){
                    if(!visited.contains(nbrs)){
                        q.add(nbrs);
                    }
                }
            }
            ans.add(lt);
        }
        return ans;
    }
}
