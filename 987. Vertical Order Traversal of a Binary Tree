/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public class Pair{
        TreeNode node;
        int row;
        int col;
        public Pair(TreeNode node, int row, int col){
            this.node = node;
            this.row = row;
            this.col = col;
        }
    }
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        TreeMap<Integer,List<Pair>> map = new TreeMap<>();
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(root,0,0));
        while(!q.isEmpty()){
            Pair rv = q.poll();
            TreeNode node = rv.node;
            int r = rv.row;
            int c = rv.col;
            if(!map.containsKey(c)){
                map.put(c,new ArrayList<>());
            }
            map.get(c).add(rv);
            if(node.left != null){
                q.add(new Pair(node.left,r+1,c-1));
            }
            if(node.right != null){
                q.add(new Pair(node.right,r+1,c+1));
            }
        }
        for(int  key : map.keySet()){
            List<Pair> ll = map.get(key);
            Collections.sort(ll,new Comparator<Pair>(){
                @Override
                public int compare(Pair o1, Pair o2){
                    if(o1.row == o2.row){
                        return o1.node.val - o2.node.val;
                    }
                    return 0;
                }
            });
            List<Integer> l = new ArrayList<>();
            for(Pair e : ll){
                l.add(e.node.val);
            }
            ans.add(l);
        }
        return ans;
    }
}
